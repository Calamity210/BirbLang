double price = 11.101010;

//PROPERTIES
scremLn(price.isFinite); // output true
scremLn(price.isInfinite); // output false
scremLn(price.isNaN); // output false
scremLn(price.isNegative); // output false
scremLn(price.sign); // output 1.0
scremLn(price.runtimeType); // output double

//METHODS
scremLn(price.abs()); // output 11.10101
scremLn(price.ceil()); // output 12
scremLn(price.ceilToDouble()); // output 12.0
scremLn(price.clamp(1.0, 10.0)); // output 10.0
scremLn(price.compareTo(5.0)); // output 1
scremLn(price.floor()); // output 11
scremLn(price.floorToDouble()); // output 11.0
scremLn(price.remainder(5.0)); // output 1.1010100000000005
scremLn(price.round()); // output 11
scremLn(price.roundToDouble()); // output 11.0
scremLn(price.toInt()); // output 11
scremLn(price.toString()); // output 11.10101
scremLn(price.toStringAsExponential()); // output 1e+1
scremLn(price.toStringAsFixed(1)); // output 11.1
scremLn(price.toStringAsPrecision(1)); // output 1e+1
scremLn(price.truncate()); // output 11
scremLn(price.truncateToDouble()); // output 11.0

scremLn(double.infinity); // output Infinity
scremLn(double.negInfinity); // output -Infinity
scremLn(double.nan); // output NaN
scremLn(double.maxFinite); // output 1.7976931348623157e+308
scremLn(double.minPositive); // output 5e-324
